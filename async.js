//동기 프로그래밍
//function syncFunction(){
//console.log("첫 번째 작업");
//console.log("두 번째 작업");
//console.log("세 번째 작업");

//}
//syncFunction();

//동기 프로그래밍 : 코드를 순차적으로 실행하는 방식
//=> 한 작업이 끝날 때 까지 다음 작업은 대기하는 방식
//순차적으로 작업을 처리하면 코드의 실행순서를 예측하기 쉽고 간단한 코드 작성 가능
//하지만 작업이 끝날 때까지 다음 작업을 기다려야 하므로 블록킹이 발생할 수 있음
//블록킹은 앞선 작업들이 끝날 때 까지 뒤의 작업들이 대기하는 상황이므로 이로 인해 작업이 느리거나 막히는 현상이 발생


function asyncFunction() {
console.log("첫 번째 작업");

setTimeout(function() {
  console.log("두 번째 작업");
}, 1000)
console.log("세 번째 작업")
}

asyncFunction();


//setTimeOut : 웹 api에서 지원하는 비동기함수 중의 하나로 일정시간이 지난후에 특정 작업을 실행하는 기능
//1초후에 function함수를 실행하라는 것(1000은 1초)
//비동기 프로그래밍 : 작업이 끝날 때 까지 기다리지 않고 바로 다른 작업을 실행하는 방식
//비동기처리방식으로 작업을 실행함으로서 블로킹 문제를 해결하고 대기 시간을 최소화 할 수 있음
//callback함수는 파라미터로 넘겨지는 함수, callback함수는 setTimeout함수가 처리된 후 호출되는 함수로 이러한 callback함수는 arrowfunction으로 사용할 수 있다.
//세번째 작업을 실행하고 있는 와중에도 두번째 작업은 비동기라 계속 돌아가고 있다. 